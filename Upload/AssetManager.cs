using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using RobloxFiles;
using Source2Roblox.Forms;

namespace Source2Roblox.Upload
{
    public struct AssetUploadResponse
    {
        public bool Success;
        public string Message;

        public long? AssetId;
        public long? BackingAssetId;
    }

    public class AssetManager
    {
        private string XsrfToken = "FETCH";

        private const string UploadDecal = "https://data.roblox.com/data/upload/json?assetTypeId=13";
        private const string UploadMesh = "https://data.roblox.com/ide/publish/UploadNewMesh?";

        public readonly string RootDir;
        public readonly string RbxAssetDir;

        private readonly Dictionary<string, Task<string>> workPool = new Dictionary<string, Task<string>>();

        public AssetManager(string rootDir, string rbxAssetDir)
        {
            RootDir = rootDir;
            RbxAssetDir = rbxAssetDir;
        }

        public Task<string> GetAssetId(string localPath)
        {
            string filePath = Path.Combine(RootDir, localPath);
            string assetPath = filePath + ".asset";

            if (!File.Exists(assetPath))
            {
                var uploadForm = new Uploader(filePath);

                if (!uploadForm.IsDisposed)
                    uploadForm.ShowDialog();

                if (uploadForm.Upload)
                {
                    return Task.Run(async () =>
                    {
                        var info = new FileInfo(filePath);
                        var extension = info.Extension;

                        string name = info.Name.Replace(extension, "");
                        string endpoint = null;

                        if (extension == ".png")
                            endpoint = UploadDecal;
                        else if (extension == ".mesh")
                            endpoint = UploadMesh;

                        if (endpoint != null)
                        {
                            var http = new RobloxWebClient();
                            byte[] content = File.ReadAllBytes(filePath);

                            string uploadName = WebUtility.UrlEncode(name);
                            string uploadDesc = WebUtility.UrlEncode("Generated by Source2Roblox");

                            for (int retry = 0; retry < 5; retry++)
                            {
                                try
                                {
                                    string postUrl = $"{endpoint}&name={uploadName}&description={uploadDesc}";
                                    var rawResponse = await http.UploadDataTaskAsync(postUrl, content);

                                    string responseJson = Encoding.UTF8.GetString(rawResponse);
                                    var response = JsonConvert.DeserializeObject<AssetUploadResponse>(responseJson);

                                    if (!response.Success)
                                        throw new Exception(response.Message);

                                    long? assetId = response.BackingAssetId;

                                    if (assetId.HasValue)
                                    {
                                        string asset = assetId.ToString();
                                        File.WriteAllText(assetPath, asset);

                                        Console.WriteLine($"Uploaded asset: {asset}");
                                        break;
                                    }
                                }
                                catch (WebException e)
                                {
                                    var response = e.Response as HttpWebResponse;

                                    if (response.StatusDescription.Contains("XSRF"))
                                    {
                                        XsrfToken = response.Headers.Get("X-CSRF-TOKEN");
                                        http.Headers.Set("X-CSRF-TOKEN", XsrfToken);
                                    }
                                    else Debugger.Break();
                                }
                                catch (Exception e)
                                {
                                    Console.ForegroundColor = ConsoleColor.Red;
                                    Console.WriteLine(e.Message);
                                    Console.ForegroundColor = ConsoleColor.Gray;

                                    if (!e.Message.Contains("inappropriate"))
                                        continue;

                                    uploadName = WebUtility.UrlEncode("[ Content Deleted ]");
                                }
                            }
                        }

                        if (File.Exists(assetPath))
                        {
                            string assetId = File.ReadAllText(assetPath);
                            return $"rbxassetid://{assetId}";
                        }

                        return $"{RbxAssetDir}/{localPath}";
                    });
                }
            }

            return Task.Run(() =>
            {
                if (File.Exists(assetPath))
                {
                    string assetId = File.ReadAllText(assetPath);
                    return $"rbxassetid://{assetId}";
                }

                return $"{RbxAssetDir}/{localPath}";
            });
        }

        public void BindAssetId(string localPath, List<Task> uploadPool, Instance target, string property)
        {
            Property prop = target.GetProperty(property);

            if (prop == null)
                throw new Exception($"Unknown property {property} in {target.ClassName}");

            // Prompt should be synchronously shown to user.
            if (!workPool.TryGetValue(localPath, out var getAssetId))
            {
                getAssetId = GetAssetId(localPath);
                workPool[localPath] = getAssetId;
            }

            // Hand off upload to asynchronous task.
            Task bind = Task.Run(async () =>
            {
                string assetId = await getAssetId.ConfigureAwait(false);
                prop.Value = assetId;
            });

            // Add to the upload task pool.
            uploadPool.Add(bind);
        }
    }
}
